{"version":3,"file":"orders.js","sourceRoot":"","sources":["../../controllers/orders.ts"],"names":[],"mappings":";;;;;;AAAA,iEAAyC;AAEzC,0EAAkD;AAElD,MAAM,WAAW,GAAG,IAAI,eAAK,CAAC,QAAQ,CAAC,CAAC;AAEjC,MAAM,gBAAgB,GAAG,KAAK,EAAE,GAAW,EAAE,GAAY,EAAE,EAAE;IAChE,IAAI;QACA,MAAM,aAAa,GAAU,GAAG,CAAC,IAAI,CAAC;QACtC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACpC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,aAAa,EAAE,aAAa,EAAC,CAAC,CAAC;KACxD;IACD,OAAO,KAAS,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KACpD;AACL,CAAC,CAAA;AAVY,QAAA,gBAAgB,oBAU5B;AACM,MAAM,iBAAiB,GAAG,KAAK,EAAE,GAAW,EAAE,GAAY,EAAE,EAAE;IAClE,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAA;IAC5C,IAAI;QACA,MAAM,aAAa,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;KAC7B;IACD,OAAO,KAAS,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KACpD;AACL,CAAC,CAAA;AAVY,QAAA,iBAAiB,qBAU7B;AAEM,MAAM,YAAY,GAAG,KAAK,EAAE,GAAW,EAAE,GAAY,EAAE,EAAE;IAC5D,IAAG;QACD,MAAM,EAAC,EAAE,EAAC,GAAG,GAAG,CAAC,MAAM,CAAC;QACxB,MAAM,KAAK,GAAG,MAAM,gBAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAChF,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KAChB;IAAC,OAAM,GAAG,EAAE;QACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;KACxB;AACH,CAAC,CAAA;AATU,QAAA,YAAY,gBAStB;AACM,MAAM,YAAY,GAAG,KAAK,EAAE,GAAW,EAAE,GAAY,EAAE,EAAE;IAC9D,IAAI;QACA,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;QACpE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACvB;IAAC,OAAM,GAAG,EAAE;QACT,MAAM,GAAG,CAAC;KACb;AACH,CAAC,CAAA;AAPY,QAAA,YAAY,gBAOxB","sourcesContent":["import Orders from \"../db/models/orders\";\nimport { Request, Response } from \"express\";\nimport Queue from \"../middlewares/rabbitmq/queue\";\n\nconst ordersQueue = new Queue(\"orders\");\n\nexport const pushOrderToQueue = async (req:Request, res:Response) => {\n    try {\n        const receivedOrder:string = req.body;\n        ordersQueue.producer(receivedOrder);\n        res.status(201).json({receivedOrder: receivedOrder});\n    }\n    catch (error:any) {\n        console.log(error);\n        res.status(409).json({ message: error.message });\n    }\n}\nexport const getOrderFromQueue = async (req:Request, res:Response) => {\n   console.log('trying to get order from queue')\n    try {\n        const receivedOrder = ordersQueue.consumeOne();\n        res.status(201).json(receivedOrder);\n        console.log(receivedOrder)\n    }\n    catch (error:any) {\n        res.status(409).json({ message: error.message });\n    }\n}\n\nexport const getOrderById = async (req:Request, res:Response) => {\n    try{\n      const {id} = req.params;\n      const order = await Orders.query().findById(id).withGraphFetched('order_lines');\n      res.json(order)\n    } catch(err) {\n      console.log(err)\n    res.status(500).json(err)\n    }\n  }\n  export const getAllOrders = async (req:Request, res:Response) => {\n    try {\n        const orders = await Orders.query().then(orders => res.json(orders))\n        console.log(orders);\n    } catch(err) {\n        throw err;\n    }\n  }"]}