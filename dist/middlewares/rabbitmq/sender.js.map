{"version":3,"file":"sender.js","sourceRoot":"","sources":["../../../middlewares/rabbitmq/sender.ts"],"names":[],"mappings":";;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAA;AAI5C,iEAAiE;AACjE,wBAAwB;AACxB,8BAA8B;AAC9B,6BAA6B;AAC7B,qBAAqB;AACrB,6BAA6B;AAC7B,8CAA8C;AAC9C,qBAAqB;AACrB,QAAQ;AACR,IAAI;AACJ,6BAA6B;AAE7B,wDAAwD;AACxD,yEAAyE;AACzE,sBAAsB;AACtB,oCAAoC;AACpC,aAAa;AACb,gEAAgE;AAChE,0BAA0B;AAC1B,gCAAgC;AAChC,iBAAiB;AACjB,uCAAuC;AACvC,kDAAkD;AAClD,uCAAuC;AACvC,0CAA0C;AAC1C,kCAAkC;AAClC,kBAAkB;AAClB,2DAA2D;AAC3D,4FAA4F;AAC5F,cAAc;AACd,UAAU;AACV,KAAK;AACL,6BAA6B;AAE7B,qCAAqC;AACrC,wEAAwE;AACxE,sBAAsB;AACtB,oCAAoC;AACpC,YAAY;AACZ,gEAAgE;AAChE,0BAA0B;AAC1B,gCAAgC;AAChC,gBAAgB;AAChB,yCAAyC;AACzC,cAAc;AACd,UAAU;AACV,IAAI;AACJ,MAAqB,MAAM;IAEvB,YAAY,SAAgB;QACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,UAAU,CAAE,OAAW;QACzB,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAC,KAAK,EAAE,MAAY,EAAE,UAAc,EAAE,EAAE;YACzE,IAAG,MAAM,EAAC;gBACN,MAAM,MAAM,CAAC,OAAO,CAAC;aACxB;YACD,MAAM,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,MAAU,EAAE,OAAW,EAAC,EAAE;gBAC5D,IAAG,MAAM,EAAC;oBACN,MAAM,MAAM,CAAC;iBAChB;gBACD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACpC,OAAO,CAAC,GAAG,CAAC,EAAC,KAAK,EAAC,GAAG,EAAC,CAAC,CAAA;gBACxB,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,EAAC;oBAC5B,OAAO,EAAG,KAAK;iBAClB,CAAC,CAAC;gBACH,MAAM,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;gBAClD,OAAO,CAAC,GAAG,CAAC,iCAAiC,KAAK,kBAAkB,EAAC,GAAG,CAAC,CAAA;YAC7E,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA1BD,yBA0BC;AAED,8CAA8C;AAE9C,iBAAiB;AACjB,2BAA2B;AAC3B,kCAAkC;AAClC,4CAA4C;AAG5C,kBAAkB","sourcesContent":["\nconst amqp = require('amqplib/callback_api')\nimport { AmqpConnectionManager, ChannelWrapper } from 'amqp-connection-manager';\nimport { IAmqpConnectionManager } from 'amqp-connection-manager/dist/esm/AmqpConnectionManager';\nimport { ConfirmChannel, Connection } from 'amqplib';\n// const sender = (queueName:string, message:any,method:any) => {\n//     switch (method) {\n//         case 'kapkaSender':\n//             kapkaSender();\n//             break;\n//         case 'amqpSender':\n//             amqpSender(queueName, message);\n//             break;\n//     }\n// }\n// const kapkaSender = ()=>{}\n\n// const amqpSender = (queueName:string, message:any)=>{\n//     amqp.connect('amqp://localhost', (error0:any, connection:any) => {\n//         if(error0){\n//             throw error0.message;\n//         };\n//         connection.createChannel((error1:any, channel:any)=>{\n//             if(error1){\n//                 throw error1;\n//             };\n//             const queue = queueName;\n//             const msg =JSON.stringify(message);\n//             console.log({queue,msg})\n//             channel.assertQueue(queue,{\n//                 durable : false\n//             });\n//             channel.sendToQueue(queue, Buffer.from(msg))\n//             console.log(` [x] Message has been sent to ${queueName} queue. Content:`,msg)\n//         });\n//     });\n// };\n// export default amqpSender;\n\n// export const amqpConnect = () => {\n//     amqp.connect('amqp://localhost',(error0:any, connection:any) => {\n//         if(error0){\n//             throw error0.message;\n//         }\n//         connection.createChannel((error1:any, channel:any)=>{\n//             if(error1){\n//                 throw error1;\n//             }\n//             console.log('Amqp is up!')\n//         });\n//     });\n// }\nexport default class Sender {\n    queueName:string\n    constructor(queueName:string) {\n        this.queueName = queueName;\n    }\n\n    async amqpSender (message:any) {\n        await amqp.connect('amqp://localhost',async (error0:Error, connection:any) => {\n            if(error0){\n                throw error0.message;\n            }\n            await connection.createChannel(async (error1:any, channel:any)=>{\n                if(error1){\n                    throw error1;\n                }\n                const queue = this.queueName;\n                const msg = JSON.stringify(message);\n                console.log({queue,msg})\n                await channel.assertQueue(queue,{\n                    durable : false\n                });\n                await channel.sendToQueue(queue, Buffer.from(msg))\n                console.log(` [x] Message has been sent to ${queue} queue. Content:`,msg)\n            });\n        });\n    }\n}\n\n// const orderSender = new orderSender(\"msg\");\n\n// objection knex\n// objection (make schemas)\n// knex (Crate tables (migration))\n// state machin: lib>order>orderStateMachine\n\n\n// order prossesor"]}