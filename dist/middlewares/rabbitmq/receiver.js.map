{"version":3,"file":"receiver.js","sourceRoot":"","sources":["../../../middlewares/rabbitmq/receiver.ts"],"names":[],"mappings":";;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAE7C,8CAA8C;AAC9C,8EAA8E;AAC9E,sBAAsB;AACtB,wBAAwB;AACxB,UAAU;AACV,gEAAgE;AAChE,wBAAwB;AACxB,0BAA0B;AAC1B,YAAY;AACZ,mCAAmC;AAEnC,uCAAuC;AACvC,2BAA2B;AAC3B,cAAc;AACd,iGAAiG;AACjG,gDAAgD;AAChD,gHAAgH;AAChH,eAAe;AACf,0BAA0B;AAC1B,cAAc;AACd,YAAY;AACZ,UAAU;AACV,KAAK;AACL,MAAqB,QAAQ;IAE3B,YAAY,SAAgB;QACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,YAAY;QACV,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,MAAU,EAAE,UAAc,EAAE,EAAE;YAC9D,IAAI,MAAM,EAAE;gBACV,MAAM,MAAM,CAAC;aACd;YACD,UAAU,CAAC,aAAa,CAAC,CAAC,MAAU,EAAE,OAAW,EAAE,EAAE;gBACnD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,CAAC;iBACd;gBACD,MAAM,KAAK,GAAO,IAAI,CAAC,SAAS,CAAC;gBAEjC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE;oBACzB,OAAO,EAAE,KAAK;iBACf,CAAC,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,KAAK,wBAAwB,CAAC,CAAC;gBAC3E,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,GAAO,EAAE,EAAE;oBAC/B,OAAO,CAAC,GAAG,CAAC,+BAA+B,KAAK,mBAAmB,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACjG,CAAC,EAAE;oBACC,KAAK,EAAE,IAAI;iBACd,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA7BD,2BA6BC","sourcesContent":["import { ConfirmChannel, Connection } from 'amqplib';\nconst amqp = require('amqplib/callback_api');\n\n// const amqpReceiver =(queueName:string) => {\n//     amqp.connect('amqp://localhost', function(error0:any, connection:any) {\n//       if (error0) {\n//         throw error0;\n//       }\n//       connection.createChannel((error1:any, channel:any) => {\n//         if (error1) {\n//           throw error1;\n//         }\n//         const queue = queueName;\n    \n//         channel.assertQueue(queue, {\n//           durable: false\n//         });\n//         console.log(` [*] Waiting for messages in ${queueName}. To exit press CTRL+C`, queue);\n//         channel.consume(queue, (msg:any) => {\n//             console.log(` [x] Received messages from ${queueName} queue. Content: `, msg.content.toString());\n//         }, {\n//             noAck: true\n//         });\n//       });\n//     });\n// };\nexport default class Receiver {\n  queueName:string\n  constructor(queueName:string) {\n      this.queueName = queueName;\n  }\n\n  amqpReceiver () {\n    amqp.connect('amqp://localhost', (error0:any, connection:any) => {\n      if (error0) {\n        throw error0;\n      }\n      connection.createChannel((error1:any, channel:any) => {\n        if (error1) {\n          throw error1;\n        }\n        const queue:any = this.queueName;\n    \n        channel.assertQueue(queue, {\n          durable: false\n        });\n        console.log(` [*] Waiting for messages in ${queue}. To exit press CTRL+C`);\n        channel.consume(queue, (msg:any) => {\n            console.log(` [x] Received messages from ${queue} queue. Content: `, msg.content.toString());\n        }, {\n            noAck: true\n        });\n      });\n    });\n  }\n}"]}