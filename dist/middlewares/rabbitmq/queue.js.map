{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../middlewares/rabbitmq/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import amqp, { AmqpConnectionManager, ChannelWrapper } from 'amqp-connection-manager';\nimport { ConfirmChannel } from 'amqplib';\nimport { error } from 'console';\n\nexport default class Queue {\n    queueName: string;\n    connection: AmqpConnectionManager\n    channelWrapper: ChannelWrapper\n    constructor(queueName:any){\n        this.queueName = queueName;\n        this.connection = amqp.connect(['amqp://localhost']);\n        this.channelWrapper = this.connection.createChannel({\n            json: true,\n            setup: function (channel:ConfirmChannel) {\n              // `channel` here is a regular amqplib `ConfirmChannel`.\n              // Note that `this` here is the channelWrapper instance.\n              return channel.assertQueue('rxQueueName', { durable: true });\n            },\n          });\n    }\n    async checkQueue() {\n       return this.channelWrapper.checkQueue(this.queueName)\n    }\n    async assertQueue() {\n        this.channelWrapper.assertQueue(this.queueName);\n    }\n    async producer (message: string) {\n            try {\n                await this.assertQueue();\n                return await this.channelWrapper.sendToQueue(this.queueName, message);\n            }\n            catch (error:any) {\n                throw Error(error);\n            }\n    }\n    async consumer () {\n        await this.channelWrapper.consume(this.queueName, (message)=>{\n            console.log(\"Consumer has received the following message: \" + message)\n            return message;\n        });\n    }\n    async consumeOne () {\n        await this.channelWrapper\n        .get(this.queueName,{noAck:true})\n        .then(function (msg) {\n        return console.log('Message was sent!  Hooray!', msg);\n        })\n        .catch(function (err) {\n        return console.log('Message was rejected...  Boo!');\n        });\n    }\n}\n\n\n\n\n\n\n\n// export default class Queue {\n//     private readonly queueName: string;\n//     private readonly channelSetupCompletedPromise: Promise<any>;\n//     private readonly setupFunctionPromise: (channel: any) => Promise<void>;\n//     private readonly channelWrapper: ChannelWrapper;\n  \n//     private readonly SEND_TICKETS_JOBS_QUEUE_NAME = 'jobs';\n  \n//     constructor(queueName: string, private connection: AmqpConnectionManager) {\n//       this.queueName = queueName;\n  \n//       let resolveOnSetupCompleted: any;\n  \n//       this.channelSetupCompletedPromise = new Promise((resolve: any) => {\n//         resolveOnSetupCompleted = resolve;\n//       });\n//       this.setupFunctionPromise = async (channel: any): Promise<void> => {\n//         await Promise.all([\n//           channel.assertQueue(this.queueName, { durable: true, maxPriority: 10 }),\n//           channel.assertExchange(this.queueName, 'topic', { durable: true }),\n//           channel.bindQueue(this.queueName, this.queueName, this.queueName),\n//         ]);\n  \n//         resolveOnSetupCompleted();\n//       };\n  \n//       this.channelWrapper = this.connection.createChannel({\n//         json: true,\n//         setup: (channel: any) => this.setupFunctionPromise(channel),\n//       });\n  \n//       this.channelWrapper.on('error', (err: any) => {\n//         throw Error('Channel error: ' + err );\n//       });\n//     }\n\n// }\n\n// class QueueFactory {\n//     private queues: { [key: string]: Queue } = {};\n//     private readonly connection: AmqpConnectionManager;\n  \n//     constructor() {\n//       this.connection = amqp.connect('amqp://localhost');\n//       this.connection.on('disconnect', (data: any) => {\n//         if (data.err) {\n//           throw Error('Queue Disconnected with error: '+data.err);\n//         }\n//       });\n  \n//       this.connection.on('error', (data: any) => {\n//         if (data.err) {\n//           throw Error('Queue Disconnected with error: '+data.err);\n//         }\n//       });\n//     }\n  \n//     of(queueName: string): Queue {\n//       if (!this.queues[queueName]) {\n//         this.queues[queueName] = new Queue(queueName, this.connection);\n//       }\n  \n//       return this.queues[queueName];\n//     }\n  \n//     async closeAll(): Promise<void> {\n//       try {\n//         const closePromises = Object.values(this.queues).map((queue: Queue) => queue.close());\n//         await Promise.all(closePromises);\n//         console.log(`AMQP - Closed all Queues`);\n//         await this.connection.close();\n//         console.log(`AMQP - Closed connection`);\n//       } catch (err) {\n//         throw Error(`while closing all Queue connections`+err);\n//       }\n//     }\n//   }"]}