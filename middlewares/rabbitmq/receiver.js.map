{"version":3,"file":"receiver.js","sourceRoot":"","sources":["receiver.ts"],"names":[],"mappings":";AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAE7C,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAS,MAAU,EAAE,UAAc;IAClE,IAAI,MAAM,EAAE;QACV,MAAM,MAAM,CAAC;KACd;IACD,UAAU,CAAC,aAAa,CAAC,CAAC,MAAU,EAAE,OAAW,EAAE,EAAE;QACnD,IAAI,MAAM,EAAE;YACV,MAAM,MAAM,CAAC;SACd;QACD,MAAM,KAAK,GAAG,OAAO,CAAC;QAEtB,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE;YACzB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,uDAAuD,EAAE,KAAK,CAAC,CAAC;QAC5E,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,GAAO,EAAE,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5D,CAAC,EAAE;YACC,KAAK,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const amqp = require('amqplib/callback_api');\n\namqp.connect('amqp://localhost', function(error0:any, connection:any) {\n  if (error0) {\n    throw error0;\n  }\n  connection.createChannel((error1:any, channel:any) => {\n    if (error1) {\n      throw error1;\n    }\n    const queue = 'hello';\n\n    channel.assertQueue(queue, {\n      durable: false\n    });\n    console.log(\" [*] Waiting for messages in %s. To exit press CTRL+C\", queue);\n    channel.consume(queue, (msg:any) => {\n        console.log(\" [x] Received %s\", msg.content.toString());\n    }, {\n        noAck: true\n    });\n  });\n});"]}